/* ----- < 14단계 정수론 및 조합론 > ----- */
//
//
//
//
//
/* --- < 5086 > --- */

/*
< 문제 >
	4 × 3 = 12이다.
	이 식을 통해 다음과 같은 사실을 알 수 있다.
	3은 12의 약수이고, 12는 3의 배수이다.
	4도 12의 약수이고, 12는 4의 배수이다.
	두 수가 주어졌을 때, 다음 3가지 중 어떤 관계인지 구하는 프로그램을 작성하시오.

	첫 번째 숫자가 두 번째 숫자의 약수이다.
	첫 번째 숫자가 두 번째 숫자의 배수이다.
	첫 번째 숫자가 두 번째 숫자의 약수와 배수 모두 아니다.

< 입력 >
	입력은 여러 테스트 케이스로 이루어져 있다.
	각 테스트 케이스는 10,000이 넘지않는 두 자연수로 이루어져 있다.
	마지막 줄에는 0이 2개 주어진다. 두 수가 같은 경우는 없다.

< 출력 >
	각 테스트 케이스마다 첫 번째 숫자가 두 번째 숫자의 약수라면 factor를,
	배수라면 multiple을, 둘 다 아니라면 neither를 출력한다.
*/

//#include <iostream>
//
//int main()
//{
//	int num1, num2;
//
//	while (std::cin >> num1 >> num2)
//	{
//		if (num1 == 0 && num2 == 0) { break; }
//
//		if (num2 % num1 == 0) { std::cout << "factor" << '\n'; }
//		else if (num1 % num2 == 0) { std::cout << "multiple" << '\n'; }
//		else { std::cout << "neither" << '\n'; }
//	}
//}

/* --- < 1037 > --- */

/*
< 문제 >
	양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다.
	어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.

< 입력 >
	첫째 줄에 N의 진짜 약수의 개수가 주어진다.
	이 개수는 50보다 작거나 같은 자연수이다.
	둘째 줄에는 N의 진짜 약수가 주어진다.
	1,000,000보다 작거나 같고, 2보다 크거나 같은 자연수이고, 중복되지 않는다.

< 출력 >
	첫째 줄에 N을 출력한다.
	N은 항상 32비트 부호있는 정수로 표현할 수 있다.

< 풀이 >
	양수 A의 가장 작은 약수가 min 이라고 할때 가장 큰 약수 max =  A/min이 된다.
	따라서 min(최소)값과 max(최대)값을 서로 곱해주면 A를 구할 수 있다.
	그런데 30의 경우 약수가 2, 3 ,5 일텐데 위의 말대로라면 2 * 5 = 10 이 정답이 아닌가?
	할 수도 있다.
	그러나 문제에서 "N의 진짜 약수가 전부 주어진다" 라고 했기 때문에
	30이 답이라면 2,3,5,6,10,15 가 주어졌을 것이다.
*/

//#include <iostream>
//
//int main()
//{
//	int N;
//	std::cin >> N;
//
//	int max{};
//	int min{ 1000000 };
//
//	for (int i = 0; i < N; i++)
//	{
//		int num;
//		std::cin >> num;
//
//		if (max < num) max = num;
//		if (min > num) min = num;
//	}
//
//	std::cout << max * min << '\n';
//}

/* --- < 2609 > --- */

/*
< 문제 >
	두 개의 자연수를 입력받아 최대 공약수와 최소 공배수를 출력하는 프로그램을 작성하시오.

< 입력 >
	첫째 줄에는 두 개의 자연수가 주어진다.
	이 둘은 10,000이하의 자연수이며 사이에 한 칸의 공백이 주어진다.

< 출력 >
	첫째 줄에는 입력으로 주어진 두 수의 최대공약수를,
	둘째 줄에는 입력으로 주어진 두 수의 최소 공배수를 출력한다.

< 풀이 >
	#include <numeric>
	std::gcd();	// 최대 공약수
	std::lcm();	// 최소 공배수

	num1(60) % num2(48) = result(12)
	num1(48) % num2(12) = result(0)
	num1(12) % num2(0) -> return num1(12);

	num1(60) X num2(48) = result(2880)
	result(2880) / gcd(12) = 240;
*/

//#include <iostream>
//
//int DevideNum(int num1, int num2)
//{
//	return num2 ? DevideNum(num2, (num1 % num2) : num1);
//}
//
//int main()
//{
//	int num1, num2;
//	std::cin >> num1 >> num2;
//
//	std::cout << DevideNum(num1, num2) << '\n';
//	std::cout << num1 * num2 / DevideNum(num1, num2) << '\n';
//}

/* --- < 1934 > --- */

/*
< 문제 >
	두 자연수 A와 B에 대해서, A의 배수이면서 B의 배수인 자연수를 A와 B의 공배수라고 한다.
	이런 공배수 중에서 가장 작은 수를 최소공배수라고 한다.
	예를 들어, 6과 15의 공배수는 30, 60, 90등이 있으며, 최소 공배수는 30이다.

	두 자연수 A와 B가 주어졌을 때, A와 B의 최소공배수를 구하는 프로그램을 작성하시오.

< 입력 >
	첫째 줄에 테스트 케이스의 개수 T(1 ≤ T ≤ 1,000)가 주어진다.
	둘째 줄부터 T개의 줄에 걸쳐서 A와 B가 주어진다. (1 ≤ A, B ≤ 45,000)

< 출력 >
	첫째 줄부터 T개의 줄에 A와 B의 최소공배수를 입력받은 순서대로 한 줄에 하나씩 출력한다.
*/

//#include <iostream>
//
//int GCD(int a, int b)
//{
//	return b ? GCD(b, a % b) : a;
//}
//
//int main()
//{
//	int T;
//	std::cin >> T;
//
//	for (int i = 0; i < T; i++)
//	{
//		int A, B;
//		std::cin >> A >> B;
//
//		std::cout << A * B / GCD(A, B) << '\n';
//	}
//}

/* --- < 2981 > --- */

/*
< 문제 >
	트럭을 타고 이동하던 상근이는 경찰의 검문을 받게 되었다.
	경찰은 상근이가 운반하던 화물을 하나하나 모두 확인할 것이기 때문에,
	검문하는데 엄청나게 오랜 시간이 걸린다.

	상근이는 시간을 때우기 위해서 수학 게임을 하기로 했다.

	먼저 근처에 보이는 숫자 N개를 종이에 적는다.
	그 다음, 종이에 적은 수를 M으로 나누었을 때, 나머지가 모두 같게 되는 M을 모두 찾으려고 한다.
	M은 1보다 커야 한다.

	N개의 수가 주어졌을 때, 가능한 M을 모두 찾는 프로그램을 작성하시오.

< 입력 >
	첫째 줄에 종이에 적은 수의 개수 N이 주어진다. (2 ≤ N ≤ 100)

	다음 줄부터 N개 줄에는 종이에 적은 수가 하나씩 주어진다.
	이 수는 모두 1보다 크거나 같고, 1,000,000,000보다 작거나 같은 자연수이다.
	같은 수가 두 번 이상 주어지지 않는다.

	항상 M이 하나 이상 존재하는 경우만 입력으로 주어진다.

< 출력 >
	첫째 줄에 가능한 M을 공백으로 구분하여 모두 출력한다.
	이때, M은 증가하는 순서이어야 한다.

< 풀이 >
	6, 34, 38 의 M을 찾아라.
	M으로 값을 나눌 경우 모두 공통된 R을 남기게 된다. 즉, M 이란 공통된 모두의 약수( 공약수 )이다.
	6을 M으로 나누고 남은 R이라는 결과 값과 34를 M으로 나누고 남은 R이라는 결과 값이 같다.
	(6/M+R) 과 (34/M+R) 의 차 = (6-34)/M 과 같다.
	이는 (6-34)/M = (34-38)/M 과 같다.

	일반적으로 어떤 수 n의 약수를 구할 때, 1부터 n까지 모든 수를 검사하여 n을 그 수로 나눌 수 있으면 약수로 간주한다. 그러나 중복된 약수가 발생할 수 있다.
	예를 들어, 12의 약수는 1, 2, 3, 4, 6, 12 이다. 이때 1과 12는 같은 값이며, 2와 6도 같은 값이다.
	따라서 약수를 구할 때, 1부터 n까지 모두 확인하면서 약수를 구하지만, 
	중복된 값을 방지하기 위해 i가 최대 공약수의 제곱근과 같지 않을 경우에만 약수로 인정하고 벡터에 추가하는 것이다.
*/

//#include <iostream>
//#include <vector>
//#include <algorithm>
//
//int GCD(int num1, int num2)
//{
//	return num2 ? GCD(num2, num1 % num2) : num1;
//}
//
//int main()
//{
//	int N;
//	std::cin >> N;
//
//	std::vector<int> table(N);
//	for (int i = 0; i < N; i++)
//	{
//		std::cin >> table[i];
//	}
//	std::sort(table.begin(), table.end());
//	
//	int gcd = table[1] - table[0];
//	for (int i = 2; i < N; i++)
//	{
//		gcd = GCD(gcd, table[i] - table[i - 1]);
//	}
//
//	std::vector<int> result;
//	for (int i = 1; i * i <= gcd; i++)
//	{
//		if (!(gcd % i))
//		{
//			result.push_back(i);
//			if (i != gcd / i) result.push_back(gcd / i);
//		}
//	}
//	std::sort(result.begin(), result.end());
//	for (auto& e : result)
//	{
//		if (e != 1) std::cout << e << ' ';
//	}
//}
