/* ----- < 6단계 문자열 > ----- */
//
//
//
//
//
/* --- < 10809 > --- */

/*
< 문제 >
	알파벳 소문자로만 이루어진 단어 S가 주어진다.
	각각의 알파벳에 대해서, 단어에 포함되어 있는 경우에는 처음 등장하는 위치를,
	포함되어 있지 않은 경우에는 -1을 출력하는 프로그램을 작성하시오.

< 입력 >
	첫째 줄에 단어 S가 주어진다.
	단어의 길이는 100을 넘지 않으며, 알파벳 소문자로만 이루어져 있다.

< 출력 >
	각각의 알파벳에 대해서, a가 처음 등장하는 위치, b가 처음 등장하는 위치,
	... z가 처음 등장하는 위치를 공백으로 구분해서 출력한다.
	만약, 어떤 알파벳이 단어에 포함되어 있지 않다면 -1을 출력한다.
	단어의 첫 번째 글자는 0번째 위치이고, 두 번째 글자는 1번째 위치이다.
*/

//#include <iostream>
//#include <vector>
//#include <string>
//
//int main()
//{
//	std::string S;
//	std::cin >> S;
//
//	// 1. 알파벳의 등장 위치를 저장할 배열을 초기화
//	std::vector<int> result(26, -1);
//
//	// 2. 입력으로 주어진 단어를 한 글자씩 탐색
//	for (int i = 0; i < S.length(); i++)
//	{
//		// 3. 아스키 코드값을 구한다.
//		int index = S[i] - 'a';
//		// 4. 해당 문자가 만약 첫 등장 한 것이라면 인덱스 번호를 원소로 쥐어 준다.
//		if (result[index] == -1) result[index] = i;
//	}
//
//	for (int i : result) std::cout << i << ' ';
//}

/* --- < 1157 > --- */

/*
< 문제 >
	알파벳 대소문자로 된 단어가 주어지면,
	이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오.
	단, 대문자와 소문자를 구분하지 않는다.

< 입력 >
	첫째 줄에 알파벳 대소문자로 이루어진 단어가 주어진다.
	주어지는 단어의 길이는 1,000,000을 넘지 않는다.

< 출력 >
	첫째 줄에 이 단어에서 가장 많이 사용된 알파벳을 대문자로 출력한다.
	단, 가장 많이 사용된 알파벳이 여러 개 존재하는 경우에는 ?를 출력한다.
*/

//#include <iostream>
//#include <string>
//
//int main()
//{
//	std::string S;
//	std::cin >> S;
//
//	// 1. 알파벳의 등장 횟수를 저장할 배열을 초기화
//	int count[26]{};
//
//	// 2. 단어를 한 글자씩 탐색하면서 알파벳의 등장 횟수를 카운트
//	for (char c : S)
//	{
//		if ('a' <= S[c] && S[c] <= 'z')
//			count[c - 'a']++;
//		else
//			count[c - 'A']++;
//	}
//
//	// 3. 등장 횟수를 저장한 배열에서 가장 큰 값
//	int max{};
//	// 4. 해당 문자
//	char maxChar = { '?' };
//	// 5. 중복 플래그
//	bool isDup{ false };
//
//	for (int i = 0; i < 26; i++)
//	{
//		// 6. 중복되는 값이 있는지 확인한다.
//		if (count[i] > max)
//		{
//			max = count[i];
//			maxChar = 'A' + i;
//			isDup = false;
//		}
//		else if (count[i] == max)
//		{
//			isDup = true;
//		}
//	}
//
//	if (isDup)
//		std::cout << "?\n";
//	else
//		std::cout << maxChar << '\n';
//}